) +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)  # Center the plot title
)  +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d")
ggplot(all_workouts_df, aes(x = Date, y = MovingAverage, color = Exercise, group = Exercise)) +
geom_line() +
geom_point() +
labs(title = "Moving Average of One Rep Max Over Time by Muscle Group",
x = "Date",
y = "Moving Average of One Rep Max") +
theme_minimal() +
facet_wrap(~ Muscle_Group) +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)  # Center the plot title
)  +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d")
all_workouts_df = all_workouts_df[-which(is.na(all_workouts_df$MovingAverage)),]
View(all_workouts_df)
# Create the visualization using ggplot2, grouping by Muscle_Group
q = ggplot(all_workouts_df, aes(x = Date, y = MovingAverage, color = Exercise, group = Exercise)) +
geom_line() +
geom_point() +
labs(title = "Moving Average of One Rep Max Over Time by Muscle Group",
x = "Date",
y = "Moving Average of One Rep Max") +
theme_minimal() +
facet_wrap(~ Muscle_Group) +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)  # Center the plot title
)  +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d") +
scale_y_continuous(expand = expansion(mult = c(5, 5)))
ggplot(all_workouts_df, aes(x = Date, y = MovingAverage, color = Exercise, group = Exercise)) +
geom_line() +
geom_point() +
labs(title = "Moving Average of One Rep Max Over Time by Muscle Group",
x = "Date",
y = "Moving Average of One Rep Max") +
theme_minimal() +
facet_wrap(~ Muscle_Group) +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)  # Center the plot title
)  +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d") +
scale_y_continuous(expand = expansion(mult = c(5, 5)))
ggplot(all_workouts_df, aes(x = Date, y = MovingAverage, color = Exercise, group = Exercise)) +
geom_line() +
geom_point() +
labs(title = "Moving Average of One Rep Max Over Time by Muscle Group",
x = "Date",
y = "Moving Average of One Rep Max") +
theme_minimal() +
facet_wrap(~ Muscle_Group) +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)  # Center the plot title
)  +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d") +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.1)))
ggplot(all_workouts_df, aes(x = Date, y = MovingAverage, color = Exercise, group = Exercise)) +
geom_line() +
geom_point() +
labs(title = "Moving Average of One Rep Max Over Time by Muscle Group",
x = "Date",
y = "Moving Average of One Rep Max") +
theme_minimal() +
facet_wrap(~ Muscle_Group, scales = "free_y") +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)  # Center the plot title
)  +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d") +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.1)))
# List of exercises and corresponding muscle groups
exercises = list(
Press = c("Bench Press",
"Dumbbell Incline Press",
"One-arm Dumbbell Arnold Press",
"Clean and Press"),
Back = c("Chin-Ups",
"Dumbbell Rows"),
Legs = c("Squats",
"Deadlifts"
),
Shoulders = c("Lateral Raises", "Upright Rows"),
biceps = c("Barbell Curls", "Dumbbell Curls", "Hammer Curls"),
triceps = c("Overhead Triceps Extensions", "Bench-Dips")
)
# Create a data frame from the list
exercise_df <- data.frame(
Muscle_Group = rep(names(exercises), lengths(exercises)),
Exercise = unlist(exercises)
)
# Function to calculate 1RM using the Epley formula
calculate_1rm <- function(weight, reps) {
weight * (1 + reps / 30)
}
# Function to calculate weight using the Epley formula
calculate_weight <- function(one_rep_max, reps) {
one_rep_max / (1 + reps / 30)
}
# Get a list of workout files
workout_files <- list.files(path = "./logs", pattern = "workout-.*\\.txt$", full.names = TRUE)
# Assuming your list of workout files is named 'workout_files'
# Initialize an empty list to store the extracted data
all_workout_data <- list()
# Loop through each workout file
for (file in workout_files) {
# Extract the date from the file name (assuming the format "workout-YYYY-MM-DD.txt")
workout_date <- as.Date(sub("workout-", "", sub("\\.txt", "", basename(file))), format = "%Y-%m-%d")
# Read the file content
file_content <- readLines(file)
# Extract exercise blocks (assuming each block starts with "Press:", "Back:", etc.)
exercise_blocks <- strsplit(paste(file_content, collapse = "\n"), "(Press:|Back:|Legs:|Shoulders:|Biceps:|Triceps:)")[[1]][-1]
# Loop through each exercise block
for (block in exercise_blocks) {
# Extract exercise name
exercise_name <- trimws(strsplit(block, "\n")[[1]][1])
exercise_name <- trimws(sub("- 3 sets", "", exercise_name))  # Remove " - 3 sets" part
# Extract rest time
rest_time <- as.numeric(sub(".*Rest: (\\d+) seconds.*", "\\1", block))
# Extract sets, reps, and weight using corrected regular expressions
sets <- as.numeric(sub(".*- (\\d+) sets.*", "\\1", block))
reps <- unlist(regmatches(block, gregexpr("Reps: (\\d+),", block)))
reps <- as.numeric(gsub("[^0-9]", "", reps)) # Extract only the numbers from reps
weight <- unlist(regmatches(block, gregexpr("Weight: (\\d+) lbs", block)))
weight <- as.numeric(gsub("[^0-9]", "", weight)) # Extract only the numbers from weight
# Create a data frame for the exercise
exercise_data <- data.frame(
Date = workout_date,
Exercise = exercise_name,
Set = 1:sets,
Reps = reps,
Weight = weight,
Rest = rest_time,
One_Rep_Max = calculate_1rm(weight, reps)  # Calculate 1RM here
)
# Add the exercise data to the list
all_workout_data[[length(all_workout_data) + 1]] <- exercise_data
}
}
# Combine all workout data into a single data frame
all_workouts_df <- do.call(rbind, all_workout_data)
# Order the data frame by Date in descending order
all_workouts_df <- all_workouts_df[order(all_workouts_df$Date, decreasing = TRUE), ]
# load necessary libraries
library(ggplot2)
library(dplyr)
# Assuming you have your 'all_workouts_df' data frame ready
# Merge the two data frames based on the 'Exercise' column
all_workouts_df <- merge(all_workouts_df, exercise_df, by = "Exercise")
# Just look at data from Set 1
all_workouts_df_allsets = all_workouts_df
all_workouts_df = all_workouts_df[which(all_workouts_df$Set == 1),]
# Create a separate data frame for the legend and order it by Muscle_Group
legend_df <- all_workouts_df %>%
select(Exercise, Muscle_Group) %>%
distinct() %>%
arrange(Muscle_Group)  # Order by Muscle_Group
# Create a function to calculate synthetic 1RM for a given date
calculate_synthetic_1rm <- function(df, date_) {
latest_1rm <- df %>%
filter(Exercise %in% c("Bench Press", "Squats", "Deadlifts", "Chin-Ups", "Clean and Press")) %>%
filter(Date <= date_) %>%  # Filter data up to the given date
group_by(Exercise) %>%
arrange(desc(Date)) %>%
slice_head(n = 1) %>%
ungroup()
# Check for missing values
if (sum(latest_1rm$Exercise %in% c("Bench Press", "Squats", "Deadlifts", "Chin-Ups", "Clean and Press")) < 5) {
return(NA)  # Return NA if any of the component exercises are missing
} else {
synthetic_1rm <- sum(latest_1rm$One_Rep_Max)
return(synthetic_1rm)
}
}
library(purrr)
# Calculate synthetic 1RM for each date
synthetic_1rm_data <- all_workouts_df %>%
select(Date) %>%
distinct() %>%
mutate(Synthetic_1RM = map_dbl(Date, ~calculate_synthetic_1rm(all_workouts_df, .x)))
# Create a data frame for the synthetic exercise, similar to the original data format
synthetic_exercise_data <- synthetic_1rm_data %>%
rename(One_Rep_Max = Synthetic_1RM) %>%  # Rename Synthetic_1RM to MovingAverage
mutate(Exercise = "Compound Lift Total") %>%  # Add Exercise column
select(Date, Exercise, One_Rep_Max)  # Reorder columns
# Combine the synthetic exercise data with the original data
all_workouts_df <- bind_rows(all_workouts_df, synthetic_exercise_data)
# Add a 'Week' column for weekly grouping (adjust the calculation if needed)
all_workouts_df$Week <- as.Date(cut(all_workouts_df$Date, breaks = "week", start.on.monday = FALSE))
# Calculate moving average every 3 workouts, starting with the earliest 3
all_workouts_df <- all_workouts_df %>%
group_by(Exercise) %>%
arrange(Date) %>%
mutate(Workout_Number = row_number()) %>%
mutate(MovingAverage = zoo::rollapply(One_Rep_Max, width = 3, FUN = mean, align = "right", fill = NA)) %>%
ungroup()
all_workouts_df = all_workouts_df[-which(is.na(all_workouts_df$MovingAverage)),]
weekly_sets <- all_workouts_df %>%
group_by(Muscle_Group, Week) %>%
summarize(TotalSets = length(Set))
# Create the visualization using ggplot2, grouping by Muscle_Group
ggplot(all_workouts_df, aes(x = Date, y = MovingAverage, color = Exercise, group = Exercise)) +
geom_line() +
geom_point() +
labs(title = "Moving Average of One Rep Max Over Time by Muscle Group",
x = "Date",
y = "Moving Average of One Rep Max") +
theme_minimal() +
facet_wrap(~ Exercise, scales = "free_y") +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)  # Center the plot title
)  +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d") +
scale_y_continuous(expand = expansion(mult = c(0.1, 0.1)))
# Create the visualization using ggplot2, grouping by Muscle_Group
ggplot(all_workouts_df, aes(x = Date, y = MovingAverage, color = Exercise, group = Exercise)) +
geom_line() +
geom_point() +
labs(title = "Moving Average of One Rep Max Over Time by Muscle Group",
x = "Date",
y = "Moving Average of One Rep Max") +
theme_minimal() +
facet_wrap(~ Exercise, scales = "free_y") +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)  # Center the plot title
)  +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d") +
scale_y_continuous(expand = expansion(mult = c(0.15, 0.15)))
# Create the visualization using ggplot2, grouping by Muscle_Group
ggplot(all_workouts_df, aes(x = Date, y = MovingAverage, color = Exercise, group = Exercise)) +
geom_line() +
geom_point() +
labs(title = "Moving Average of One Rep Max Over Time by Muscle Group",
x = "Date",
y = "Moving Average of One Rep Max") +
theme_minimal() +
facet_wrap(~ Exercise, scales = "free_y") +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)  # Center the plot title
)  +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d") +
scale_y_continuous(expand = expansion(mult = c(0.2, 0.2)))
# List of exercises and corresponding muscle groups
exercises = list(
Press = c("Bench Press",
"Dumbbell Incline Press",
"One-arm Dumbbell Arnold Press",
"Clean and Press"),
Back = c("Chin-Ups",
"Dumbbell Rows"),
Legs = c("Squats",
"Deadlifts"
),
Shoulders = c("Lateral Raises", "Upright Rows"),
biceps = c("Barbell Curls", "Dumbbell Curls", "Hammer Curls"),
triceps = c("Overhead Triceps Extensions", "Bench-Dips")
)
# Create a data frame from the list
exercise_df <- data.frame(
Muscle_Group = rep(names(exercises), lengths(exercises)),
Exercise = unlist(exercises)
)
# Function to calculate 1RM using the Epley formula
calculate_1rm <- function(weight, reps) {
weight * (1 + reps / 30)
}
# Function to calculate weight using the Epley formula
calculate_weight <- function(one_rep_max, reps) {
one_rep_max / (1 + reps / 30)
}
# Get a list of workout files
workout_files <- list.files(path = "./logs", pattern = "workout-.*\\.txt$", full.names = TRUE)
# Assuming your list of workout files is named 'workout_files'
# Initialize an empty list to store the extracted data
all_workout_data <- list()
# Loop through each workout file
for (file in workout_files) {
# Extract the date from the file name (assuming the format "workout-YYYY-MM-DD.txt")
workout_date <- as.Date(sub("workout-", "", sub("\\.txt", "", basename(file))), format = "%Y-%m-%d")
# Read the file content
file_content <- readLines(file)
# Extract exercise blocks (assuming each block starts with "Press:", "Back:", etc.)
exercise_blocks <- strsplit(paste(file_content, collapse = "\n"), "(Press:|Back:|Legs:|Shoulders:|Biceps:|Triceps:)")[[1]][-1]
# Loop through each exercise block
for (block in exercise_blocks) {
# Extract exercise name
exercise_name <- trimws(strsplit(block, "\n")[[1]][1])
exercise_name <- trimws(sub("- 3 sets", "", exercise_name))  # Remove " - 3 sets" part
# Extract rest time
rest_time <- as.numeric(sub(".*Rest: (\\d+) seconds.*", "\\1", block))
# Extract sets, reps, and weight using corrected regular expressions
sets <- as.numeric(sub(".*- (\\d+) sets.*", "\\1", block))
reps <- unlist(regmatches(block, gregexpr("Reps: (\\d+),", block)))
reps <- as.numeric(gsub("[^0-9]", "", reps)) # Extract only the numbers from reps
weight <- unlist(regmatches(block, gregexpr("Weight: (\\d+) lbs", block)))
weight <- as.numeric(gsub("[^0-9]", "", weight)) # Extract only the numbers from weight
# Create a data frame for the exercise
exercise_data <- data.frame(
Date = workout_date,
Exercise = exercise_name,
Set = 1:sets,
Reps = reps,
Weight = weight,
Rest = rest_time,
One_Rep_Max = calculate_1rm(weight, reps)  # Calculate 1RM here
)
# Add the exercise data to the list
all_workout_data[[length(all_workout_data) + 1]] <- exercise_data
}
}
# Combine all workout data into a single data frame
all_workouts_df <- do.call(rbind, all_workout_data)
# Order the data frame by Date in descending order
all_workouts_df <- all_workouts_df[order(all_workouts_df$Date, decreasing = TRUE), ]
# load necessary libraries
library(ggplot2)
library(dplyr)
# Assuming you have your 'all_workouts_df' data frame ready
# Merge the two data frames based on the 'Exercise' column
all_workouts_df <- merge(all_workouts_df, exercise_df, by = "Exercise")
# Just look at data from Set 1
all_workouts_df_allsets = all_workouts_df
all_workouts_df = all_workouts_df[which(all_workouts_df$Set == 1),]
# Create a separate data frame for the legend and order it by Muscle_Group
legend_df <- all_workouts_df %>%
select(Exercise, Muscle_Group) %>%
distinct() %>%
arrange(Muscle_Group)  # Order by Muscle_Group
# Create a function to calculate synthetic 1RM for a given date
calculate_synthetic_1rm <- function(df, date_) {
latest_1rm <- df %>%
filter(Exercise %in% c("Bench Press", "Squats", "Deadlifts", "Chin-Ups", "Clean and Press")) %>%
filter(Date <= date_) %>%  # Filter data up to the given date
group_by(Exercise) %>%
arrange(desc(Date)) %>%
slice_head(n = 1) %>%
ungroup()
# Check for missing values
if (sum(latest_1rm$Exercise %in% c("Bench Press", "Squats", "Deadlifts", "Chin-Ups", "Clean and Press")) < 5) {
return(NA)  # Return NA if any of the component exercises are missing
} else {
synthetic_1rm <- sum(latest_1rm$One_Rep_Max)
return(synthetic_1rm)
}
}
library(purrr)
# Calculate synthetic 1RM for each date
synthetic_1rm_data <- all_workouts_df %>%
select(Date) %>%
distinct() %>%
mutate(Synthetic_1RM = map_dbl(Date, ~calculate_synthetic_1rm(all_workouts_df, .x)))
# Create a data frame for the synthetic exercise, similar to the original data format
synthetic_exercise_data <- synthetic_1rm_data %>%
rename(One_Rep_Max = Synthetic_1RM) %>%  # Rename Synthetic_1RM to MovingAverage
mutate(Exercise = "Compound Lift Total") %>%  # Add Exercise column
select(Date, Exercise, One_Rep_Max)  # Reorder columns
# Combine the synthetic exercise data with the original data
all_workouts_df <- bind_rows(all_workouts_df, synthetic_exercise_data)
# Add a 'Week' column for weekly grouping (adjust the calculation if needed)
all_workouts_df$Week <- as.Date(cut(all_workouts_df$Date, breaks = "week", start.on.monday = FALSE))
# Calculate moving average every 3 workouts, starting with the earliest 3
all_workouts_df <- all_workouts_df %>%
group_by(Exercise) %>%
arrange(Date) %>%
mutate(Workout_Number = row_number()) %>%
mutate(MovingAverage = zoo::rollapply(One_Rep_Max, width = 3, FUN = mean, align = "left", fill = NA)) %>%
ungroup()
all_workouts_df = all_workouts_df[-which(is.na(all_workouts_df$MovingAverage)),]
weekly_sets <- all_workouts_df %>%
group_by(Muscle_Group, Week) %>%
summarize(TotalSets = length(Set))
# Create the visualization using ggplot2, grouping by Muscle_Group
ggplot(all_workouts_df, aes(x = Date, y = MovingAverage, color = Exercise, group = Exercise)) +
geom_line() +
geom_point() +
labs(title = "Moving Average of One Rep Max Over Time by Muscle Group",
x = "Date",
y = "Moving Average of One Rep Max") +
theme_minimal() +
facet_wrap(~ Exercise, scales = "free_y") +
theme(
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)  # Center the plot title
)  +
scale_x_date(date_breaks = "2 days", date_labels = "%b %d") +
scale_y_continuous(expand = expansion(mult = c(0.2, 0.2)))
View(all_workouts_df)
library(zoo)
library(shiny); runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
library(shinyFiles)
library(shiny)
library(shinyFiles)
library(ggplot2)
library(dplyr)
library(purrr)
library(zoo)
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('log.analysis.graphs.R')
runApp('shinyv2.R')
runApp('shinyv2.R')
runApp('shinyv2.R')
runApp('shinyv2.R')
runApp('log.analysis.graphs.R')
library(shiny); runApp('log.analysis.graphs.R')
runApp()
runApp("./log.analysis.graphs.R")
library(shiny)
runApp(appDir = "./lifting.progress.app.R")
runApp(launch.browser = TRUE)
library(shiny)
runApp(launch.browser = TRUE)
runApp(launch.browser = TRUE)
source("./lifting.progress.app.R")
source("./lifting.progress.app.R")
source("./lifting.progress.app.R")
source("./log.analysis.R")
source("./lifting.progress.app.R")
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
source("./log.analysis.R")
source("./lifting.progress.app.R")
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
source("./log.analysis.R")
source("./log.analysis.R")
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
source("./lifting.progress.app.R")
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
source("./lifting.progress.app.R")
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
source("./lifting.progress.app.R")
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
source("./log.analysis.R")
source("./lifting.progress.app.R")
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
source("./log.analysis.R")
source("./lifting.progress.app.R")
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
source("./log.analysis.R")
source("./log.analysis.R")
source("./log.analysis.R")
source("./lifting.progress.app.R")
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
source("./log.analysis.R")
source("./log.analysis.R")
source("./lifting.progress.app.R")
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
source("./lifting.progress.app.R")
runApp(appDir = "./lifting.progress.app.R",launch.browser = T)
